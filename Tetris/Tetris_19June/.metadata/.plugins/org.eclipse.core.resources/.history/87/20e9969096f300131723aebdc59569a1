package devan.drawing;

import java.util.HashMap;

import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.BitmapFont.TextBounds;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.utils.Disposable;

import devan.animation.SpriteMap;
import devan.rendering.Display;

/**
 * TODO add more variables
 * @author dustin
 */
public class GraphicsData implements Disposable{
	
	private Display 			currentDisplay;
	private HashMap<String, Display> displays;
	public ShapeRenderer 		shapeRenderer;
	public SpriteBatch	 		spriteBatch;
	//public PolygonSpriteBatch 	polygonSpriteBatch;
	public BitmapFont 			font;
	public SpriteMap			gameSprites;
	public int worldWidth;
	public int worldHeight;
	
	public GraphicsData(Display DISPLAY){
		shapeRenderer 	= new ShapeRenderer();
		spriteBatch 	= new SpriteBatch();
		//polygonSpriteBatch = new PolygonSpriteBatch();
		font			= new BitmapFont();
		gameSprites		= new SpriteMap();

		displays = new HashMap<String, Display>();
		displays.put("Main", DISPLAY);
		currentDisplay = DISPLAY;
		
		worldWidth = DISPLAY.width;
		worldHeight = DISPLAY.height;
	}
	
	public void drawText(String text, int xPos, int yPos, Color c){
		spriteBatch.begin();
		font.setColor(c);
		font.draw(spriteBatch, text, currentDisplay.x + xPos, currentDisplay.y + yPos);
		spriteBatch.end();
	}
	private TextBounds textBounds;
	public void drawCenteredText(String text, int xCenterPos, int yCenterPos, Color c){
		textBounds = font.getBounds(text);
		drawText(text, (int)(xCenterPos - textBounds.width/2), (int)(yCenterPos - textBounds.height/2), c);
	}
	public void scaleText(float amount){ font.scale(amount); }
	
	public void addDisplay(String name, Display display){ displays.put(name, display); }
	public void setDisplay(String name){ currentDisplay = displays.get(name); }
	public Display getDisplay(){ return currentDisplay; }
	
	@Override
	public void dispose(){
		shapeRenderer.dispose();
		spriteBatch.dispose();
		//polygonSpriteBatch.dispose();
		font.dispose();
		gameSprites.dispose();
	}
	
	public float transX(float x){
		return currentDisplay.x + transWidth(x);
	}
	public float transY(float y){
		return currentDisplay.y + transHeight(y);
	}
	public float transWidth(float w){
		return w/worldWidth * currentDisplay.width;
	}
	public float transHeight(float h){
		return h/worldHeight * currentDisplay.height;
	}
}
