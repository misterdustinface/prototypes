package com.retroactivegames.game;

import com.badlogic.gdx.graphics.Color;

import devan.drawing.GeometryDrawer;
import devan.drawing.GraphicsData;

abstract public class BlockGridRenderer {

	public static Color[] colors  	= new Color[]{Color.DARK_GRAY, Color.BLUE, Color.CYAN, Color.GREEN, Color.YELLOW, Color.ORANGE, Color.RED, Color.PINK, Color.MAGENTA};
	public static int blockOffset 	= 2;
	
	public BlockGridRenderer(){}
	
	public void renderGrid(GraphicsData g, BlockGrid grid){
		int blockSize = getBlockSize(g, grid);
		for(int row = 0; row < grid.getRows(); ++row){
			for(int col = 0; col < grid.getCols(); ++col){
				GeometryDrawer.drawFilledRectangle(g, 	(int)(col*blockSize + (col+0.5f)*blockOffset), 
														(int)(row*blockSize + (row+0.5f)*blockOffset), 
														blockSize, blockSize, colors[grid.getBlock(row, col)]);
			}
		}
	}
	
	public void renderGrid(GraphicsData g, BlockGrid grid, Color c){
		int blockSize = getBlockSize(g, grid);
		for(int row = 0; row < grid.getRows(); ++row){
			for(int col = 0; col < grid.getCols(); ++col){
				GeometryDrawer.drawFilledRectangle(g, 	(int)(col*blockSize + (col+0.5f)*blockOffset), 
														(int)(row*blockSize + (row+0.5f)*blockOffset), 
														blockSize, blockSize, c);
			}
		}
	}
	
	private void drawBlock(GraphicsData g, int blockSize, int row, int col){
		GeometryDrawer.drawFilledRectangle(g, 	(int)(col*blockSize + (col+0.5f)*blockOffset), 
				(int)(row*blockSize + (row+0.5f)*blockOffset), 
				blockSize, blockSize, colors[grid.getBlock(row, col)]);
	}
	
	public int getBlockSize(GraphicsData g, BlockGrid grid){
		return java.lang.Math.min(getBlockWidth(g, grid), getBlockHeight(g, grid));
	}
	
	private int getBlockWidth(GraphicsData g, BlockGrid grid){
		return g.display.width/grid.getCols()  - blockOffset;
	}
	private int getBlockHeight(GraphicsData g, BlockGrid grid){
		return g.display.height/grid.getRows() - blockOffset;
	}

}
