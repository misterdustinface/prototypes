package com.retroactivegames.game;


import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.GL20;

import devan.drawing.GraphicsData;
import devan.init.OpenGL;
import devan.rendering.Display;
import devan.sound.FadeOut;
import devan.sound.MusicPlaylist;
import devan.sound.PlaylistEmptyException;

public class Game implements ApplicationListener {
	final public static String[] SONGS = new String[]{"data/Pignon_Rouge.mp3", "data/cakeIsGone.mp3", "data/plat.mp3"};
	
	final public static int WORLD_WIDTH  = 10;
	final public static int WORLD_HEIGHT = 22;
	
	private TetrisWorld 		world;
	
	private TetrisWorldRenderer worldRenderer;
	private GraphicsData 		worldRendererGraphicsData;
	private Display				worldRendererScreen;
	
	private TetrisHUD			hudRenderer;
	private GraphicsData 		hudGraphicsData;
	private Display				hudScreen;
	
	final private static String NEXT_BLOCK_SCREEN = "NEXT";
	final private static String	HELD_BLOCK_SCREEN = "HELD";
	
	//private TetrinoController	controller;
	private DebugController		debugController;
	
	final private int WORLD_RENDERER_DISPLAY_X_OFFSET = 32;
	final private int WORLD_RENDERER_DISPLAY_Y_OFFSET = 48;
	
	final private int HUD_RENDERER_DISPLAY_Y_OFFSET_FROM_WORLD_RENDERER = -4;
	
	private MusicPlaylist playlist;
	
	//private FadeOut fadeout = new FadeOut(6000L);
	
	@Override
	public void create() {		
		
		world 			= new TetrisWorld(WORLD_WIDTH, WORLD_HEIGHT);
		worldRenderer 	= new TetrisWorldRenderer(world);
		hudRenderer 	= new TetrisHUD(world, NEXT_BLOCK_SCREEN, HELD_BLOCK_SCREEN);
		
		OpenGL.initialize(Gdx.gl);
		worldRendererScreen 		= new Display(	WORLD_RENDERER_DISPLAY_X_OFFSET, 
													WORLD_RENDERER_DISPLAY_Y_OFFSET, 
													Gdx.graphics.getWidth() - WORLD_RENDERER_DISPLAY_X_OFFSET*2, 
													Gdx.graphics.getHeight() - WORLD_RENDERER_DISPLAY_Y_OFFSET*2);
		
		worldRendererGraphicsData 	= new GraphicsData(worldRendererScreen);
		
		hudScreen 					= new Display(	WORLD_RENDERER_DISPLAY_X_OFFSET, 
													Gdx.graphics.getHeight() - WORLD_RENDERER_DISPLAY_Y_OFFSET - HUD_RENDERER_DISPLAY_Y_OFFSET_FROM_WORLD_RENDERER, 
													Gdx.graphics.getWidth() - WORLD_RENDERER_DISPLAY_X_OFFSET*2, 
													WORLD_RENDERER_DISPLAY_Y_OFFSET - HUD_RENDERER_DISPLAY_Y_OFFSET_FROM_WORLD_RENDERER*2);
		hudGraphicsData = new GraphicsData(hudScreen);
		
		hudGraphicsData.addDisplay(NEXT_BLOCK_SCREEN, hudScreen.section(0f,	0.3f, 0.4f,0.4f));
		hudGraphicsData.addDisplay(HELD_BLOCK_SCREEN, hudScreen.section(0.5f,0.3f,0.4f,0.4f));
		
		//controller 		= new TetrinoController(world);
		debugController = new DebugController(world, worldRenderer);
		
		playlist = new MusicPlaylist(SONGS);
		
		try {
			playlist.shuffleTracks();
			playlist.play();
			//playlist.manipulateCurrentTrack(fadeout);
		} catch (PlaylistEmptyException e) {
			e.printStackTrace();
		}
	
	}

	@Override
	public void dispose() {
		worldRendererGraphicsData.dispose();
		hudGraphicsData.dispose();
	}

	
	@Override
	public void render() {
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
		
		if(! GameState.isPaused){
			world.update();
		}
		
//		fadeout.update();
//		if(! fadeout.hasMusicToFade()){
//			try {
//				playlist.nextTrack();
//				playlist.manipulateCurrentTrack(fadeout);
//				playlist.shuffleTracks();
//			} catch (PlaylistEmptyException e) {
//				e.printStackTrace();
//			}
//		}
		
		worldRenderer.render(worldRendererGraphicsData);
		hudRenderer.render(hudGraphicsData);
		
	}

	@Override
	public void resize(int width, int height) {
		//screen.resize(width, height);
	}

	@Override
	public void pause() {
		GameState.isPaused = true;
	}

	@Override
	public void resume() {
		GameState.isPaused = false;
	}

}
