package com.retroactivegames.game;

import com.badlogic.gdx.graphics.Color;

import devan.drawing.GeometryDrawer;
import devan.drawing.GraphicsData;

public class BlockGridRenderer {

	public static Color[] colors  	= new Color[]{Color.DARK_GRAY, Color.BLUE, Color.CYAN, Color.GREEN, Color.YELLOW, Color.ORANGE, Color.RED, Color.PINK, Color.MAGENTA};
	public static int blockOffset 	= 2;
	
	public BlockGridRenderer(){}
	
	public void renderGrid(GraphicsData g, BlockGrid grid){
		int blockSize = getBlockSize(g, grid);
		for(int row = 0; row < grid.getRows(); ++row){
			for(int col = 0; col < grid.getCols(); ++col){
				drawBlock(g, blockSize, row, col, colors[grid.getBlock(row, col)]);
			}
		}
		
		GeometryDrawer.drawRectangle(g, 0, 0, g.getDisplay().getWidth(), g.getDisplay().getHeight(), Color.LIGHT_GRAY);
	}
	
	public void renderGrid(GraphicsData g, BlockGrid grid, Color c){
		int blockSize = getBlockSize(g, grid);
		for(int row = 0; row < grid.getRows(); ++row){
			for(int col = 0; col < grid.getCols(); ++col){
				drawBlock(g, blockSize, row, col, c);
			}
		}
	}
	
	private void drawBlock(GraphicsData g, int blockSize, int row, int col, Color c){
		GeometryDrawer.drawFilledRectangle(g, 	(int)(col*blockSize + (col+0.5f)*blockOffset), 
												(int)(row*blockSize + (row+0.5f)*blockOffset), 
												blockSize, blockSize, c);
	}
	
	public int getBlockSize(GraphicsData g, BlockGrid grid){
		return java.lang.Math.min(getBlockWidth(g, grid), getBlockHeight(g, grid));
	}
	
	private int getBlockWidth(GraphicsData g, BlockGrid grid){
		return (int)((float)g.getDisplay().getWidth())/grid.getCols() - blockOffset;
	}
	private int getBlockHeight(GraphicsData g, BlockGrid grid){
		return (int)((float)g.getDisplay().getHeight())/grid.getRows() - blockOffset;
	}

}
